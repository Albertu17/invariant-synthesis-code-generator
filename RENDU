           Mini-projet 2 : Synthèse d'invariant en SMT-LIB
                            fichier RENDU
                     (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 15 décembre 2023 à 22:00

Identité
--------
Nombre de binôme: 16
Nom, prénom 1: De Larminat, Foucauld
Nom, prénom 2: Tomasi, Albert


Questions sur votre code
------------------------

** Exercice 2 **

0. Avez-vous testé que `make invariants` s'exécute sans erreurs ou
   warnings, puis que `./invariants` produit une sortie au format
   SMT-LIB, et enfin que cette sortie est acceptée par Z3 ?

Oui, nous avons testé tout cela avec succès.

---

1. Le type `term` est un type récursif : quel type de fonction OCaml
   est-il naturel d'utiliser ? Quels sont vos cas de base et quelle
   quantité strictement décroissante au cours des appels successifs
   vous assure la terminaison ?

Pour déconstruire le type term, il est naturel d'utiliser une fonction
récursive avec pattern matching. La fonction string_of_term en est un exemple.

Cas de base: Const of Int | Var of Int.
Pour ces deux cas, on renvoie directement un résultat (une chaîne de
caractères dans le cas de string_of_term) sans faire d'appel récursif.

Autres cas: Add of term * term | Mult of term * term
On fait dans ces cas deux appels récursifs, avec des sous-arbres (sous-termes)
de hauteur inférieure de 1 par rapport à la hauteur de l'abre traité.
On est donc assurés que la fonction terminera après au maximum 2^n appels
récursifs, avec n la hauteur de l'abre correspondant au terme passé en argument.


---

2. Pour l'implémentation de `str_condition`, quelles sont les
   fonctions auxiliaires que vous avez utilisées et/ou écrites ? (Par
   une fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length` ou
   `List.rev_append`, ou une fonction `aux_str_condition` que vous
   avez écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `str_condition`.

Pour l'implémentation de str_condition, nous avons utilisé les fonctions
auxiliaires suivantes:
. List.map, pour appliquer la fonction string_of_term aux éléments de la
liste de termes passée en argument.
. String.concat, pour concaténer ensuite les chaînes de caractères obtenues,
en insérant un espace entre chacune d'elles.

---

3. Pour l'implémentation de `str_assert_forall`, quelles sont les
   fonctions auxiliaires que vous avez utilisées et/ou écrites ?
   Expliquez en quelques phrases en français comment ces fonctions
   auxiliaires sont utilisées dans votre implémentation de la fonction
   `str_assert_forall`.

Pour l'implémentation de str_assert_forall, nous avons utilisé les fonctions
auxiliaires suivantes:
. x (fournie), pour obtenir la chaîne de caractères "xi" à partir de l'entier i.
. rec loop, pour exécuter l'opération précédente pour tous les entiers de 1 à n
(entier passé en argument), opérer le bon formatage et concaténer tous les résultas
entre eux.
. str_assert (fournie), pour faire précéder la chaîne de caractères finale
de la mention "assert".

---

4. Le langage de programmation WA suppose que les mises à jour des
   variables `x1`, ..., `xk` sont simultanées : par exemple, si `x1`
   vaut `1` et x2 vaut `1`, exécuter

   x1 = x2 + 1;
   x2 = x1 + 1;

   résulte en `x1` valant `2` et `x2` valant `2`. En Java, les mises à
   jour sont séquentielles et le résultat serait que `x1` vaudrait `2`
   et `x2` vaudrait `3`. Expliquez comment modifier le code pour
   construire un programme SMT-LIB plus proche de la façon dont les
   variables sont mises à jour en Java.

Soient x1 et x2 deux termes tels que l'expression de x2 dépende de x1.
Une manière d'adapter le langage WA aux mises à jour séquentielles est
de remplacer dans l'expression de x2 les mentions x1 par le terme correspondant
à sa modification lors d'une itération.
Par exemple, pour le programme p1, la formule exprimant que Invar est un 
invariant de boucle ne serait plus
(assert (forall ((x1 Int) (x2 Int)) (=> (and (Invar x1 x2) (> x1 0)) (Invar (+ x1 -1) (+ x2 x1)))))
mais serait
(assert (forall ((x1 Int) (x2 Int)) (=> (and (Invar x1 x2) (> x1 0)) (Invar (+ x1 -1) (+ x2 (+ x1 -1)))))).

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

**à remplir**